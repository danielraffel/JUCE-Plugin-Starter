# JUCE Plugin Starter - AI Assistant Guidelines

This file provides guidelines for AI tools (like Cursor, Claude, etc.) when working with the JUCE Plugin Starter project.

## üìÅ Project Structure Guidelines

### Script Organization
- **All utility scripts** should be placed in `/scripts/` directory
- **Test scripts** should be placed in `/scripts/tests/` directory
- **Build scripts** (post_build.sh, sign_and_package_plugin.sh) belong in `/scripts/`
- **Main project scripts** (generate_and_open_xcode.sh, dependencies.sh) belong in `/scripts/`

### File Naming Conventions
- Use **snake_case** for script files (e.g., `setup_uv_environment.sh`)
- Use **descriptive names** that clearly indicate the script's purpose
- Add `.example` suffix for template files (e.g., `postinstall.example`)
- Test files should follow pattern: `test_phase{N}.sh`

## üîß Code Structure Guidelines

### Environment Variable Handling
- Always load `.env` file at the beginning of scripts
- Use `set -o allexport; source .env; set +o allexport` pattern
- Validate required environment variables before proceeding
- Provide clear error messages for missing variables

### Script Best Practices
- Start scripts with `#!/bin/bash` or `#!/usr/bin/env bash`
- Use `set -e` to exit on errors
- Include descriptive echo statements for user feedback
- Use emoji prefixes for better UX (üöÄ, ‚úÖ, ‚ùå, ‚ö†Ô∏è, üìÅ, etc.)

### Error Handling
- Always check if required files/directories exist before operations
- Provide helpful error messages with suggested solutions
- Use appropriate exit codes (0 for success, 1+ for errors)

## üìã Testing Guidelines

### Test Script Structure
- Each phase should have its own test file: `test_phase{N}.sh`
- Tests should be self-contained and not depend on external state
- Use temporary directories for testing to avoid affecting the main project
- Clean up test artifacts after completion

### Test Validation Patterns
- Check file existence before testing content
- Validate script executability with `[[ -x "script.sh" ]]`
- Test environment variable loading and validation
- Verify script output and behavior

## üìÑ Third-Party License Management

### License Acknowledgement Requirements
- **Always** update `installer/THIRD_PARTY_LICENSES.md` when adding or removing third-party tools
- **Include** proper attribution with tool name, version, license type, and copyright notice
- **Maintain** alphabetical ordering of acknowledgements for easy reference
- **Verify** license compatibility before adding new dependencies
- **Document** the specific use case for each third-party tool

### License File Maintenance
- Use the standardized markdown format in `installer/THIRD_PARTY_LICENSES.md`
- Include direct links to original license texts when available
- Update the "Last Updated" timestamp when making changes
- Ensure all tools referenced in scripts are properly acknowledged

## üéØ AI Assistant Behavior

### When Suggesting Changes
- **Always** place new test scripts in `scripts/tests/`
- **Always** place new utility scripts in `scripts/`
- **Prefer** modifying existing scripts over creating new ones
- **Validate** that suggested file paths exist in the project
- **Update** third-party license acknowledgements when adding/removing tools

### Code Generation Guidelines
- Follow existing code style and patterns in the project
- Use consistent error handling patterns
- Include appropriate comments for complex logic
- Maintain backward compatibility when possible

### File Path References
- Use **relative paths** from project root in documentation
- Use **absolute paths** in scripts when necessary
- Update **all references** when moving files
- Check for **hidden references** in comments and documentation

## üîÑ Workflow Guidelines

### Script Refactoring
1. **Identify** all references to scripts being moved
2. **Move** the scripts to appropriate directories
3. **Update** all references in code, documentation, and tests
4. **Test** functionality after moves
5. **Validate** with comprehensive test suite

### Adding New Features
1. **Plan** the feature implementation
2. **Create** or modify necessary scripts
3. **Update** environment variable examples if needed
4. **Add** comprehensive tests
5. **Update** documentation
6. **Update** third-party license acknowledgements if applicable

## üö® Important Notes

- **Never** break existing functionality when refactoring
- **Always** test changes thoroughly
- **Maintain** consistent coding style throughout the project
- **Document** any new environment variables in `.env.example`
- **Consider** backward compatibility for existing users
- **Ensure** proper license compliance for all third-party tools

These guidelines help ensure consistent, maintainable, and user-friendly code across the JUCE Plugin Starter project.
